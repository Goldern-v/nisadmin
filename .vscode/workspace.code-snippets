{
  "Import and export": {
    "scope": "javascript,typescript",
    "prefix": "ie",
    "body": ["import $1 from './$1'", "", "export default $1", ""],
    "description": "Import and export"
  },
  "Typescript React Component": {
    "scope": "typescriptreact",
    "prefix": "comp",
    "body": [
      "import * as React from 'react'",
      "import styled from 'styled-components'",
      "",
      "export interface Props {$3}",
      "",
      "export interface State {$4}",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends React.Component<Props, State> {",
      "",
      "  public static defaultProps: Partial<Props> = {}",
      "",
      "  public constructor (props: Props) {",
      "    super(props)",
      "",
      "    this.state = {}",
      "  }",
      "",
      "  public render () {",
      "    const {} = this.props",
      "",
      "    return (",
      "      <Wrapper>${1:TM_FILENAME_BASE }</Wrapper>",
      "    )",
      "  }",
      "",
      "}",
      "",
      "const Wrapper = styled.div``",
      ""
    ],
    "description": "Typescript React Component"
  },
  "Typescript React Stateless Component": {
    "scope": "typescriptreact",
    "prefix": "func",
    "body": [
      "interface ${1:${TM_FILENAME_BASE}}Props {$3}",
      "",
      "function ${1:${TM_FILENAME_BASE}} (props: ${1:${TM_FILENAME_BASE}}Props) {",
      "  return (",
      "    <div>$2</div>",
      "  )",
      "}"
    ],
    "description": "Typescript React Stateless Component"
  },
  "Tag Component": {
    "scope": "typescriptreact",
    "prefix": "styl",
    "body": "const ${1:Wrapper} = styled.${2:div}`$3`"
  },
  "react fun com": {
    "scope": "typescriptreact",
    "prefix": "trf",
    "body": [
      "import styled from 'styled-components'",
      "import React, { useState, useEffect } from 'react'",
      "import { RouteComponentProps } from 'react-router'",
      "export interface Props extends RouteComponentProps {} ",
      "",
      "export default function ${1:${TM_FILENAME_BASE}} () {",
      "const [count, setCount] = useState(0)",
      "useEffect(() => { console.log(count, setCount)})",
      "return <Wrapper>{count}</Wrapper>",
      "}",
      "const Wrapper = styled.div``"
    ]
  },
  "react mobx": {
    "scope": "typescript",
    "prefix": "mobx",
    "body": [
      "import { observable, computed, action } from 'mobx'",
      "",
      "class ${1:${TM_FILENAME_BASE}} {",
      "@observable public title = ''",
      "@computed",
      "public get getTitle () {",
      "return this.title",
      "}",
      "@action",
      "public setTitle = (newTitle: any) => {",
      "this.title = newTitle",
      "}",
      "}",
      "",
      "export const scheduleHomeViewModel = new ScheduleHomeViewModel()"
    ]
  },
  "react modal": {
    "scope": "typescriptreact",
    "prefix": "modal",
    "body": [
      "import styled from 'styled-components'",
      "import React, { useState, useEffect, useLayoutEffect } from 'react'",
      "import { Modal, Input, Button, Radio, DatePicker, Select, Row, Col, message } from 'antd'",
      "import { ModalComponentProps } from 'src/libs/createModal'",
      "import Form from 'src/components/Form'",
      "import { to } from 'src/libs/fns'",
      "import { Rules } from 'src/components/Form/interfaces'",
      "",
      "const Option = Select.Option",
      "export interface Props extends ModalComponentProps {",
      "  /** 表单提交成功后的回调 */",
      "  onOkCallBack?: () => {}",
      "}",
      "",
      "/** 设置规则 */",
      "const rules: Rules = {",
      "  publicDate: (val) => !!val || '请填写发表日期'",
      "}",
      "",
      "export default function  ${1:${TM_FILENAME_BASE}}(props: Props) {",
      "  const [title, setTitle] = useState('')",
      "",
      "  let { visible, onCancel } = props",
      "  let refForm = React.createRef<Form>()",
      "",
      "  const onSave = async () => {",
      "    if (!refForm.current) return",
      "    let [err, value] = await to(refForm.current.validateFields())",
      "    if (err) return",
      "",
      "    /** 保存接口 */",
      "    // service(value).then((res: any) => {",
      "    //   message.success('保存成功')",
      "    //   props.onOkCallBack && props.onOkCallBack()",
      "    //   onCancel()",
      "    // })",
      "  }",
      "",
      "  useLayoutEffect(() => {",
      "    if (refForm.current && visible) refForm!.current!.clean()",
      "    /** 如果是修改 */",
      "    if (refForm.current && visible) {",
      "      /** 表单数据初始化 */",
      "      refForm!.current!.setFields({",
      "        publicDate: '',",
      "        title: ''",
      "      })",
      "    }",
      "  }, [visible])",
      "",
      "  return (",
      "    <Modal title={title} visible={visible} onCancel={onCancel} onOk={onSave} okText='保存' forceRender>",
      "      <Form ref={refForm} rules={rules} labelWidth={80}>",
      "        <Row>",
      "          <Col span={24}>",
      "            <Form.Field label={`发表日期`} name='publicDate' required>",
      "              <DatePicker />",
      "            </Form.Field>",
      "          </Col>",
      "",
      "          <Col span={24}>",
      "            <Form.Field label={`题目`} name='title'>",
      "              <Input />",
      "            </Form.Field>",
      "          </Col>",
      "        </Row>",
      "      </Form>",
      "    </Modal>",
      "  )",
      "}",
      "const Wrapper = styled.div``"
    ]
  }
}
